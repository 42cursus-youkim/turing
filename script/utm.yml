# 기호 뜻
# >: 바늘 위치
# 0, 1: 데이터
# o, i: 마크된 데이터 (순서대로 0, 1)
# |: 트랜지션 구분자
# ^: 선택된 트랜지션 구분자
# -: 트랜지션 필드 구분자
# $: 프로그램, 데이터 구분자

# 인코딩
# DATA$STATE-VALUE|TRANSITION(|TRANSITION+)$

# DATA: 시뮬레이트 할 튜링 머신의 입력. 바늘 위치는 '>'로 나타내며, 바늘 우측에 있는 값이 현재 읽고 있는 값이다. 데이터는 0,1로 인코딩 되어야 한다
# STATE: 현재 state
# VALUE: 현재 바늘이 읽고 있는 값
# TRANSITION: STATE-READ-NEWSTATE-WRITE-DIRECTION
#  DIRECTION은 0이 왼쪽, 1이 오른쪽.

# 제한 사항
#  - 처음에 주어진 메모리보다 오른쪽으로는 확장이 불가능
#  - BLANK는 무조건 0

# ex) unary_add

# input: '111+1='
# blank: '.'
# start state: a
# table:
#   a:
#     .: R
#     1: R
#     +: R
#     =: {write: ., L: b}
#   b:
#     1: {write: ., L: c}
#     +: {write: ., L: d}
#   c:
#     1: L
#     +: {write: 1, L: d}
#   d:

# 값 인코딩:
#  . = 00 (BLANK)
#  1 = 01
#  + = 10
#  = = 11

# 상태 인코딩
#  a = 00 (INIT)
#  b = 01
#  c = 10
#  d = 11 (HALT)

#   S  R  N  W  D - (STATE, READ, NEW_STATE, WRITE, DIRECTION)
#   transition a
# | 00 00 00 00 1
# | 00 01 00 01 1
# | 00 10 00 10 1
# | 00 11 01 00 0
#   transition b
# | 01 01 10 00 0
# | 01 10 11 00 0
#   transition c
# | 10 01 10 01 0
# | 10 10 11 01 0

# transition -> |00-00-00-00-1|00-01-00-01-1|00-10-00-10-1|00-11-01-00-0|01-01-10-00-0|01-10-11-00-0|10-01-10-01-0|10-10-11-01-0
# 초기 상태 -> 00-01
# 시뮬레이트 입력값: 111+1= -> >010101100111
# 최종 입력: >010101100111$00-01|00-00-00-00-1|00-01-00-01-1|00-10-00-10-1|00-11-01-00-0|01-01-10-00-0|01-10-11-00-0|10-01-10-01-0|10-10-11-01-0$
# 예상 출력: 010101>010000$.... -> 1111..

input: '>010101100111$00-01|00-00-00-00-1|00-01-00-01-1|00-10-00-10-1|00-11-01-00-0|01-01-10-00-0|01-10-11-00-0|10-01-10-01-0|10-10-11-01-0$'
blank: '0'
start state: s0
table:

  # pre: niddle is start of tape
  # 맨 처음 transition을 ^으로 표시한다.
  s0:
    ['>', '0', '1', 'i', 'o', '-', '$']: R
    '|': {write: '^', L: s1}
  
  # state로 돌아간다
  s1:
    ['0', '1', 'i', 'o', '|', '-', '^']: L
    '$': {R: s2}
  
  # state와 표시된 transition을 비교한다
  s2:
    ['o', 'i', '-']: R
    ['|', '^']: {L: s9}
    '0': {write: 'o', R: s3}
    '1': {write: 'i', R: s4}

  # s3 <- 0, s4 <- 1 - ^ 표시된 위치까지 이동
  s3:
    ['0', '1', 'i', 'o', '|', '-']: R
    '^': {R: s5}

  s4:
    ['0', '1', 'i', 'o', '|', '-']: R
    '^': {R: s6}

  # s5 <- 0, s6 <- 1 - 0,1 비교
  s5:
    '0': {write: 'o', L: s1}
    '1': {R: s7}
    ['i', 'o', '-']: R

  s6:
    '1': {write: 'i', L: s1}
    '0': {R: s7}
    ['i', 'o', '-']: R

  # is not equal - 다음 transition에 표시
  s7:
    ['0', '1', '-']: R
    '|': {write: '^', L: s8}
    '$': {R: HALT}

  # 변경한 정보 복구하면서 state로 돌아감
  s8:
    '^': {write: '|', L: s8}
    'i': {write: '1', L: s8}
    'o': {write: '0', L: s8}
    ['0', '1', '-', '|']: L
    '$': {R: s2}

  # 검색에 성공했을 때 - 복사할 위치를 찾음
  s9:
    ['0', '1', 'i', 'o', '|', '-']: R
    '^': {R: s9a}

  s9a:
    ['0', '1', 'i', 'o']: R
    '-': {R: s9b}
  s9b:
    ['0', '1', 'i', 'o']: R
    '-': {R: s10}

  s10:
    '0': {write: 'o', L: s11}
    '1': {write: 'i', L: s12}
    ['i', 'o']: R
    '-': {R: s10a}

  s10a:
    '0': {write: 'o', L: s11}
    '1': {write: 'i', L: s12}
    ['i', 'o']: R
    '-': {R: s15}

  # s11 <- 0, s12 <- 1 복사할 값을 기억하며 state로 돌아감
  s11:
    ['0', '1', 'i', 'o', '|', '-', '^']: L
    '$': {R: s13}

  s12:
    ['0', '1', 'i', 'o', '|', '-', '^']: L
    '$': {R: s14}

  # s13 <- 0, s14 - 1 값을 복사함
  s13:
    ['i', 'o']: {write: '0', R: s9}
    ['0', '1', '-']: R

  s14:
    ['i', 'o']: {write: '1', R: s9}
    ['0', '1', '-']: R

  # 값을 복구하면서 state로 돌아감
  s15:
    'i': {write: '1', L: s15}
    'o': {write: '0', L: s15}
    ['0', '1', '-', '|', '^']: L
    '$': {R: s16}

  s16:
    ['1', '0', '$']: R
    '-': {R: s16a}
  
  s16a:
    '0': {write: o, L: s17}
    '1': {write: i, L: s18}
    ['o', 'i']: R
    ['|', '^']: {L: s21}

  # copy value is 0
  s17:
    ['0', '1', 'i', 'o', '|', '-', '^', '$']: L
    '>': {R: s19}

  # copy value is 1
  s18:
    ['0', '1', 'i', 'o', '|', '-', '^', '$']: L
    '>': {R: s20}
  # copy value is 0
  s19:
    ['0', '1']: {write: 'o', R: s16}
    ['i', 'o']: R
  # copy value is 1
  s20:
    ['0', '1']: {write: 'i', R: s16}
    ['i', 'o']: R

  # move to niddle and restore value
  s21:
    'i': {write: '1', L: s21}
    'o': {write: '0', L: s21}
    ['0', '1', '-', '$']: L
    '>': {R: s22}

  # 바늘 이동방향 계산
  s22:
    ['0', '1', '|', '$', '-']: R
    '^': {R: s23}
  
  s23:
    ['|', '$']: {L: s24}
    ['0', '1', '-']: R

  s24:
    '0': {L: s25}
    '1': {L: s26}
  
  # direction is LEFT
  s25:
    '^': {write: '|', L: s25}
    ['0', '1', '-', '|']: L
    '$': {R: s27}
  # direction is RIGHT
  s26:
    '^': {write: '|', L: s26}
    ['0', '1', '-', '|']: L
    '$': {R: s28}
  
  # count LEFT
  s27:
    ['0', '1']: R
    '-': {R: s29}

  # count RIGHT
  s28:
    ['0', '1']: R
    '-': {R: s30}
  
  s29:
    '0': {write: 'o', L: s31}
    '1': {write: 'i', L: s31}
    ['i', 'o']: R
    '|': {L: s37}

  s30:
    '0': {write: 'o', L: s32}
    '1': {write: 'i', L: s32}
    ['i', 'o']: R
    '|': {L: s37}

  s31:
    ['-', '0', '1', 'i', 'o', '$']: L
    '>': {L: s33}

  s32:
    ['-', '0', '1', 'i', 'o', '$']: L
    '>': {R: s34}

  s33:
    '0': {write: '>', R: s33a}
    '1': {write: '>', R: s33b}

  s33a:
    '>': {write: '0', R: s35}

  s33b:
    '>': {write: '1', R: s35}

  s34:
    '0': {write: '>', L: s34a}
    '1': {write: '>', L: s34b}

  s34a:
    '>': {write: '0', R: s36}

  s34b:
    '>': {write: '1', R: s36}

  s35:
    ['0', '1']: R
    '$': {R: s27}

  s36:
    ['0', '1', '>']: R
    '$': {R: s28}

  s37:
    ['i', 'o', '0', '1', '$', '-']: L
    '>': {R: s38}

  s38:
    ['i', 'o']: R
    '0': {write: 'o', R: s39}
    '1': {write: 'i', R: s40}
    '$': {R: s42}

  s39:
    ['0', '1', '$']: R
    '-': {R: s39a}

  s39a:
    ['0', '1']: R
    ['o', 'i']: {write: '0', L: s37}
    '|': {L: s41}

  s40:
    ['0', '1', '$']: R
    '-': {R: s40a}
  
  s40a:
    ['0', '1']: R
    ['o', 'i']: {write: '1', L: s37}
    '|': {L: s41}
  
  s41:
    'i': {write: 1, L: s41}
    'o': {write: 0, L: s41}
    ['$', '0', '1', '-']: L
    '>': {R: s0}

  s42:
    ['-', 'i', 'o', '0', '1']: R
    '|': {L: s41}

  HALT:
